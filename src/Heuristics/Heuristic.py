from Board import Boardimport sysclass Heuristic:        def __init__(self, gameN, evalCount):        self.gameN = gameN        self.evalCount = 0            def getEvalCount(self):        return self.evalCount        def evaluate(self, player, board):        pass        def evaluateBoard(self, player, board):        self.evalCount +=1        return self.evaluate(player, board)        def evaluateAction(self, player, action, board):        if board.isValid(action):            self.evalCount += 1            value = self.evaluateBoard(player, board.gerNewBoard(action, player))            return value        else:            return -sys.maxsize             def evalActions(self, player, board):        utilities = board.width()        for i in range(board.width()):            utilities[i] = self.evaluateAction(player, i, board)        return utilities                 def getBestAction(self, player, board):        utilities = list(self.evalActions(player, board))        bestAction = 0        for i in range(len(utilities)):            if utilities[i] > utilities[bestAction]:                bestAction = i        return bestAction                  def __str__(self):        return self.name()                    